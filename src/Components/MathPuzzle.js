import React, { useState, useEffect } from 'react';
import './MathPuzzle.css';
import { useNotification } from '../contexts/NotificationContext';

import { useNavigate } from 'react-router-dom';

// ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå HintPopup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÅ‡∏ö‡∏ö‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û
const HintPopup = ({ hint, onClose, levelNumber }) => {
    useEffect(() => {
        document.body.classList.add('popup-active');
        
        return () => {
            document.body.classList.remove('popup-active');
        };
    }, []);
    
    return (
        <div className="hint-popup">
            <div className="hint-popup-title">üîç ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà {levelNumber}</div>
            <div className="hint-popup-content">{hint}</div>
            <button className="hint-popup-close" onClick={onClose}>‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß</button>
        </div>
    );
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå LevelSelector ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô
const LevelSelector = ({ levels, currentLevel, setCurrentLevel, completedLevels, onClose }) => {
    useEffect(() => {
        document.body.classList.add('popup-active');
        
        return () => {
            document.body.classList.remove('popup-active');
        };
    }, []);
    
    return (
        <div className="level-selector-popup">
            <div className="level-selector-title">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô</div>
            <div className="level-selector-content">
                <div className="level-grid">
                    {levels.map((level, index) => (
                        <button
                            key={index}
                            className={`level-button ${index + 1 === currentLevel ? 'current' : ''} ${index + 1 <= completedLevels ? 'unlocked' : 'locked'}`}
                            onClick={() => {
                                if (index + 1 <= completedLevels + 1) {
                                    setCurrentLevel(index + 1);
                                    onClose();
                                }
                            }}
                            disabled={index + 1 > completedLevels + 1}
                        >
                            <span className="level-number">{index + 1}</span>
                            {index + 1 <= completedLevels && <span className="completed-indicator">‚úì</span>}
                        </button>
                    ))}
                </div>
            </div>
            <button className="level-selector-close" onClick={onClose}>‡∏õ‡∏¥‡∏î</button>
        </div>
    );
};

const MathPuzzle = () => {
    const navigate = useNavigate();
    const [currentLevel, setCurrentLevel] = useState(1);
    const [answer, setAnswer] = useState('');
    const [score, setScore] = useState(0);
    const [elapsedTime, setElapsedTime] = useState(0); // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á (‡∏ô‡∏±‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô)
    const [timerInterval, setTimerInterval] = useState(null); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö clearInterval
    const [isPlaying, setIsPlaying] = useState(false);
    const [stars, setStars] = useState(0);
    const [gameCompleted, setGameCompleted] = useState(false);
    const { addNotification } = useNotification();
    const [showHintPopup, setShowHintPopup] = useState(false);
    const [showLevelSelector, setShowLevelSelector] = useState(false);
    const [completedLevels, setCompletedLevels] = useState(0);
    const [animating, setAnimating] = useState(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
    const [totalStars, setTotalStars] = useState(0); // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏≤‡∏ß‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const [starsPerLevel, setStarsPerLevel] = useState({}); // ‡πÄ‡∏Å‡πá‡∏ö‡∏î‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡πà‡∏≤‡∏ô
    const [highestScore, setHighestScore] = useState(0); // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    const [modalContent, setModalContent] = useState({ title: '', message: '' });
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [usedTimePerLevel, setUsedTimePerLevel] = useState({}); // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡πà‡∏≤‡∏ô

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏î‡πà‡∏≤‡∏ô
    const levels = [
        {
            title: "‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ö‡∏ß‡∏Å‡πÄ‡∏•‡∏Ç‡∏á‡πà‡∏≤‡∏¢‡πÜ",
            question: "‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡πâ‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏° 15 ‡∏ä‡∏¥‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å 10 ‡∏ä‡∏¥‡πâ‡∏ô ‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡πâ‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏µ‡πà‡∏ä‡∏¥‡πâ‡∏ô?",
            answer: "25",
            hint: "‡πÉ‡∏´‡πâ‡∏ö‡∏ß‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏ô‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏ô‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°",
            timeLimit: 30,
            points: 100
        },
        {
            title: "‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏•‡∏ö‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏•‡∏≥‡∏î‡∏±‡∏ö",
            question: "‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô 50 ‡∏ö‡∏≤‡∏ó ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ 15 ‡∏ö‡∏≤‡∏ó ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å 20 ‡∏ö‡∏≤‡∏ó ‡∏ô‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡∏µ‡πà‡∏ö‡∏≤‡∏ó?",
            answer: "55",
            hint: "‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö: 1. ‡∏•‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ 2. ‡∏ö‡∏ß‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°",
            timeLimit: 45,
            points: 200
        },
        {
            title: "‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏Ñ‡∏π‡∏ì‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏£",
            question: "‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ñ‡∏∏‡∏á‡∏Ç‡∏ô‡∏° 5 ‡∏ñ‡∏∏‡∏á ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ñ‡∏∏‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏° 8 ‡∏ä‡∏¥‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô 4 ‡∏Ñ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ç‡∏ô‡∏°‡∏Ñ‡∏ô‡∏•‡∏∞‡∏Å‡∏µ‡πà‡∏ä‡∏¥‡πâ‡∏ô?",
            answer: "10",
            hint: "1. ‡∏Ñ‡∏π‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ñ‡∏∏‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏ô‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ñ‡∏∏‡∏á 2. ‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô",
            timeLimit: 60,
            points: 300
        },
        {
            title: "‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏•‡∏≥‡∏î‡∏±‡∏ö",
            question: "‡∏ñ‡πâ‡∏≤ x + 5 = 12 ‡πÅ‡∏•‡∏∞ y = x √ó 2 ‡πÅ‡∏•‡πâ‡∏ß y ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£?",
            answer: "14",
            hint: "1. ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ x ‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å 2. ‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤ x ‡πÑ‡∏õ‡∏Ñ‡∏π‡∏ì 2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ y",
            timeLimit: 90,
            points: 500
        }
    ];

    // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°
    useEffect(() => {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        if (totalStars) setTotalStars(totalStars);
        if (highestScore) {
            setHighestScore(highestScore);
            setScore(highestScore);
        }

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const currentLevelData = levels[currentLevel - 1];
        setElapsedTime(0);
        setIsPlaying(true);
    }, []);

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏î‡πà‡∏≤‡∏ô
    useEffect(() => {
        if (currentLevel > 0) {
            setAnimating(true);
            const currentLevelData = levels[currentLevel - 1];
            setElapsedTime(0);
            setIsPlaying(true);
            setAnswer('');
            
            // ‡∏à‡∏ö‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 500ms
            setTimeout(() => {
                setAnimating(false);
            }, 500);
        }
    }, [currentLevel]);

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
    useEffect(() => {
        if (!isPlaying) return;
        if (timerInterval) clearInterval(timerInterval);
        setTimerInterval(null);
        setElapsedTime(0);
        const interval = setInterval(() => {
            setElapsedTime(prev => prev + 1);
        }, 1000);
        setTimerInterval(interval);
        return () => {
            clearInterval(interval);
            setTimerInterval(null);
        };
    }, [isPlaying, currentLevel]);

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    const handleTimeout = () => {
        setIsPlaying(false);
        if (timerInterval) clearInterval(timerInterval);
        setTimerInterval(null);
        addNotification({
            type: 'error',
            title: '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤!',
            message: '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
            duration: 3000
        });
        const currentLevelData = levels[currentLevel - 1];
        saveGameHistory(currentLevelData, answer || "(‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö)", false, elapsedTime, 0, 0, null);
    };

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á
    const calculateStars = (usedTime) => {
        if (usedTime <= 60) return 4;
        if (usedTime <= 120) return 3;
        if (usedTime <= 180) return 2;
        return 1;
    };

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏î‡πà‡∏≤‡∏ô
    const calculatePoints = (usedTime, totalTime, level, basePoints) => {
        // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ï‡πá‡∏° 100 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        return 100;
    };

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ
    const showHint = () => {
        const currentLevelData = levels[currentLevel - 1];
        
        // ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ (‡∏ï‡∏±‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 10% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ô‡∏±‡πâ‡∏ô)
        const hintPenalty = Math.round(currentLevelData.points * 0.1);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÉ‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const hintUsed = localStorage.getItem(`mathPuzzle_hint_level_${currentLevel}`);
        
        if (!hintUsed) {
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÅ‡∏•‡πâ‡∏ß
            localStorage.setItem(`mathPuzzle_hint_level_${currentLevel}`, 'true');
            
            // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
            addNotification({
                type: 'info',
                title: 'üîç ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà ' + currentLevel,
                message: `${currentLevelData.hint} (‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å ${hintPenalty} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)`,
                duration: 5000
            });
            
            // ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            setScore(prevScore => Math.max(0, prevScore - hintPenalty));
        } else {
            // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏Ñ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
            addNotification({
                type: 'info',
                title: 'üîç ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà ' + currentLevel,
                message: currentLevelData.hint,
                duration: 5000
            });
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ
        setShowHintPopup(true);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Å‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        const hintButton = document.querySelector('.hint-button');
        if (hintButton) {
            hintButton.classList.add('used');
            setTimeout(() => {
                hintButton.classList.remove('used');
            }, 1000);
        }
    };

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
    const handleSubmit = (e) => {
        e.preventDefault();
        const currentLevelData = levels[currentLevel - 1];
        const isCorrect = answer === currentLevelData.answer;
        const usedTime = elapsedTime;
        
        if (isCorrect) {
            playSound('correct.mp3');
            playSound('achievement.mp3');
            if (timerInterval) clearInterval(timerInterval);
            setTimerInterval(null);
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
            const earnedPoints = calculatePoints(usedTime, currentLevelData.timeLimit, currentLevel, currentLevelData.points);
            const earnedStars = calculateStars(usedTime);
            const newScore = score + earnedPoints;
            setScore(newScore);
            setStars(earnedStars);
            setIsPlaying(false);
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏î‡∏≤‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡πà‡∏≤‡∏ô
            setStarsPerLevel(prev => ({
                ...prev,
                [currentLevel]: earnedStars
            }));
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡∏≤‡∏ß‡∏£‡∏ß‡∏° (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏∞‡∏™‡∏°)
            const newTotalStars = Object.values({ ...starsPerLevel, [currentLevel]: earnedStars }).reduce((sum, s) => sum + s, 0);
            setTotalStars(newTotalStars);
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            if (newScore > highestScore) {
                setHighestScore(newScore);
            }
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            addNotification({
                type: 'success',
                title: 'üéâ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!',
                message: `+${earnedPoints} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô, ${earnedStars} ‡∏î‡∏≤‡∏ß (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å: ${Math.round((1 + (currentLevel * 0.25)) * 100)}%)`,
                duration: 3000
            });
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
            const newCompletedLevel = Math.max(completedLevels, currentLevel);
            setCompletedLevels(newCompletedLevel);
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤
            saveGameHistory(currentLevelData, answer, true, usedTime, earnedPoints, earnedStars, null);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (currentLevel < 4) {
                setTimeout(() => {
                    setCurrentLevel(prev => prev + 1);
                    setAnswer('');
                    setIsPlaying(true);
                }, 2000);
            } else {
                // ‡∏à‡∏ö‡πÄ‡∏Å‡∏°: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                setGameCompleted(true);
                addNotification({
                    type: 'success',
                    title: 'üèÜ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!',
                    message: `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${newScore} (${newTotalStars} ‡∏î‡∏≤‡∏ß)`,
                    duration: 5000
                });
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
                const student = JSON.parse(localStorage.getItem('student') || '{}');
                if (student.student_id) {
                    saveScoreToServer(student.student_id, 'mathPuzzle', newScore, newTotalStars);
                }
            } 
            setUsedTimePerLevel(prev => ({
                ...prev,
                [currentLevel]: usedTime
            }));
        } else {
            playSound('wrong.mp3');
            if (timerInterval) clearInterval(timerInterval);
            setTimerInterval(null);
            // ‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î
            addNotification({
                type: 'error',
                title: '‚ùå ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
                message: '‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                duration: 3000
            });
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô (‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î)
            saveGameHistory(currentLevelData, answer, false, usedTime, 0, 0, null);
        }
    };

    // ‡πÅ‡∏™‡∏î‡∏á‡∏î‡∏≤‡∏ß
    const StarRating = ({ stars }) => {
        return (
            <div className="star-rating">
                {[1, 2, 3, 4, 5].map((index) => (
                    <span 
                        key={index} 
                        className={`star ${index <= stars ? 'filled' : 'empty'}`}
                    >
                        ‚òÖ
                    </span>
                ))}
            </div>
        );
    };

    // ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
    const formatTime = (seconds) => {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    };

    const getCurrentLevel = () => levels[currentLevel - 1];

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏î‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const resetCurrentLevel = () => {
        const currentLevelData = levels[currentLevel - 1];
        if (timerInterval) clearInterval(timerInterval);
        setTimerInterval(null);
        setElapsedTime(0);
        setIsPlaying(true);
        setAnswer('');
        addNotification({
            type: 'info',
            title: 'üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏î‡πà‡∏≤‡∏ô',
            message: `‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${currentLevel} ‡πÉ‡∏´‡∏°‡πà`,
            duration: 3000
        });
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
    const formatMathQuestion = (question) => {
        // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏î‡πâ‡∏ß‡∏¢ span ‡∏ó‡∏µ‡πà‡∏°‡∏µ class ‡∏û‡∏¥‡πÄ‡∏®‡∏©
        let formattedQuestion = question.replace(/(\d+(\.\d+)?)/g, '<span class="math-number">$1</span>');
        
        // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ span ‡∏ó‡∏µ‡πà‡∏°‡∏µ class ‡∏û‡∏¥‡πÄ‡∏®‡∏©
        const mathFormulas = [
            'sin', 'cos', 'tan', 'log', '\\+', '\\-', '\\*', '\\/', '\\^', '=', '\\(', '\\)',
            'œÄ', '‚àö', 'Œ£', 'a\\^2', 'x\\^2', '\\d+\\^\\d+', '\\w+\\^\\d+'
        ];
        
        const formulaPattern = new RegExp(`(${mathFormulas.join('|')})`, 'g');
        formattedQuestion = formattedQuestion.replace(formulaPattern, '<span class="math-formula">$1</span>');
        
        return formattedQuestion;
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
    const saveGameHistory = (levelData, userAnswer, isCorrect, usedTime, earnedPoints, earnedStars, studentId) => {
        if (!studentId) return;
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
        const historyEntry = {
            timestamp: new Date().toISOString(),
            level: currentLevel,
            levelTitle: levelData.title,
            question: levelData.question,
            userAnswer: userAnswer,
            correctAnswer: levelData.answer,
            isCorrect: isCorrect,
            timeLimit: levelData.timeLimit,
            timeUsed: levelData.timeLimit - usedTime,
            earnedPoints: isCorrect ? earnedPoints : 0,
            earnedStars: isCorrect ? earnedStars : 0,
            hints: localStorage.getItem(`mathPuzzle_hint_level_${currentLevel}_${studentId}`) === 'true'
        };

        // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏î‡∏¥‡∏°
        let gameHistory = JSON.parse(localStorage.getItem(`mathPuzzle_history_${studentId}`) || '[]');
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà
        gameHistory.push(historyEntry);
        
        // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        if (gameHistory.length > 100) {
            gameHistory = gameHistory.slice(-100);
        }
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
        localStorage.setItem(`mathPuzzle_history_${studentId}`, JSON.stringify(gameHistory));
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
        updateGameStats(isCorrect, earnedPoints, earnedStars, studentId);
    };

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°
    const updateGameStats = (isCorrect, earnedPoints, earnedStars, studentId) => {
        if (!studentId) return;
        
        const statsKey = `mathPuzzle_stats_${studentId}`;
        const currentStats = JSON.parse(localStorage.getItem(statsKey) || '{}');
        
        const newStats = {
            totalAttempts: (currentStats.totalAttempts || 0) + 1,
            correctAnswers: (currentStats.correctAnswers || 0) + (isCorrect ? 1 : 0),
            totalPoints: (currentStats.totalPoints || 0) + earnedPoints,
            totalStars: (currentStats.totalStars || 0) + earnedStars,
            lastPlayed: new Date().toISOString()
        };
        
        localStorage.setItem(statsKey, JSON.stringify(newStats));
    };

    const saveScoreToServer = async (studentId, gameType, score, stars) => {
        const formData = new FormData();
        formData.append('student_id', studentId);
        formData.append('game_type', gameType);
        formData.append('score', score);
        formData.append('stars', stars);

        try {
            const response = await fetch('http://mgt2.pnu.ac.th/kong/app-game/save_score.php', {
                method: 'POST',
                body: formData,
            });
            const result = await response.json();
            if (!result.success) {
                console.error('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', result.message);
            }
        } catch (error) {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:', error);
        }
    };

    const handleLevelComplete = () => {
        if (currentLevel > 4) return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏î‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        const student = JSON.parse(localStorage.getItem('student') || '{}');
        const studentId = student.id;
        
        if (!studentId) {
            console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ');
            return;
        }

        const currentLevelData = levels[currentLevel - 1];
        const userAnswer = answer.trim();
        const isCorrect = userAnswer === currentLevelData.answer;
        const usedTime = elapsedTime;
        
        if (isCorrect) {
            playSound('correct.mp3');
            playSound('achievement.mp3');
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            const timeBonus = Math.floor(usedTime / (currentLevelData.timeLimit / 10));
            const earnedPoints = currentLevelData.points + timeBonus;
            const newScore = score + earnedPoints;
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö (1-3 ‡∏î‡∏≤‡∏ß)
            const earnedStars = calculateStars(usedTime);
            const newStars = earnedStars;
            const newTotalStars = totalStars + earnedStars;
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ
            setModalContent({
                title: 'üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
                message: `‡∏Ñ‡∏∏‡∏ì‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${currentLevel} ‡πÅ‡∏•‡πâ‡∏ß!\n‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: ${earnedPoints} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô\n‡∏î‡∏≤‡∏ß: ${'‚≠ê'.repeat(earnedStars)}`
            });
            setIsModalOpen(true);
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
            const newCompletedLevel = Math.max(completedLevels, currentLevel);
            setCompletedLevels(newCompletedLevel);
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            saveGameHistory(currentLevelData, userAnswer, true, usedTime, earnedPoints, earnedStars, studentId);
            
            // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏õ‡∏î‡πà‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏ö‡πÄ‡∏Å‡∏°
            setScore(newScore);
            setStars(newStars);
            setTotalStars(newTotalStars);
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏î‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ
            setStarsPerLevel(prev => ({
                ...prev,
                [currentLevel]: earnedStars
            }));
            
            if (currentLevel < 4) {
                // ‡πÑ‡∏õ‡∏î‡πà‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                setTimeout(() => {
                    setCurrentLevel(currentLevel + 1);
                    setAnswer('');
                    setElapsedTime(0);
                    setIsModalOpen(false);
                }, 3000);
            } else {
                // ‡∏à‡∏ö‡πÄ‡∏Å‡∏°
                setTimeout(() => {
                    setIsModalOpen(false);
                    
                    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏•‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ö‡πÄ‡∏Å‡∏°
                    const serverStudentId = student.student_id || studentId;
                    const finalTotalStars = Object.values({ ...starsPerLevel, [currentLevel]: earnedStars }).reduce((sum, s) => sum + s, 0);
                    saveScoreToServer(serverStudentId, 'mathPuzzle', newScore, finalTotalStars);
                    
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏ö‡πÄ‡∏Å‡∏°
                    setModalContent({
                        title: 'üèÜ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß',
                        message: `‡∏Ñ‡∏∏‡∏ì‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á 4 ‡∏î‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!\n‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${newScore} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô\n‡∏î‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${finalTotalStars} ‡∏î‡∏≤‡∏ß`
                    });
                    setIsModalOpen(true);
                    
                    // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏ö‡πÄ‡∏Å‡∏°
                    setTimeout(() => {
                        setIsModalOpen(false);
                    }, 5000);
                }, 3000);
            }
            playSound('level_complete.mp3');
        } else {
            playSound('wrong.mp3');
            // ‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
            saveGameHistory(currentLevelData, userAnswer, false, usedTime, 0, 0, studentId);
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î
            setModalContent({
                title: '‚ùå ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
                message: '‡∏•‡∏≠‡∏á‡∏Ñ‡∏¥‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤'
            });
            setIsModalOpen(true);
            
            // ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setTimeout(() => {
                setIsModalOpen(false);
            }, 2000);
        }
    };

    const playSound = (file) => {
        const audio = new Audio(process.env.PUBLIC_URL + '/sounds/' + file);
        audio.play();
    };

    useEffect(() => {
        if (gameCompleted) {
            playSound('victory_music.mp3');
        }
    }, [gameCompleted]);

    return (
        <div className="math-puzzle">
            <div className={`game-header ${animating ? 'animate-fadein' : ''}`}>
                <h1>{getCurrentLevel().title}</h1>
                <div className="game-stats">
                    <div className="score-container">
                        <div className="score">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {score}</div>
                        <div className="total-stars">‡∏î‡∏≤‡∏ß‡∏™‡∏∞‡∏™‡∏°: {totalStars}</div>
                    </div>
                    <div className={`timer ${elapsedTime > 60 ? 'timer-warning' : ''}`}>
                        <span className="timer-icon">‚è±Ô∏è</span>
                        <span className="timer-text">{formatTime(elapsedTime)}</span>
                    </div>
                    <StarRating stars={stars} />
                </div>
            </div>

            <div className={`puzzle-container ${animating ? 'animate-slidein' : ''}`}>
                {isPlaying ? (
                    <>
                        <div className="level-info">
                            <div className="question" 
                                 dangerouslySetInnerHTML={{ __html: formatMathQuestion(getCurrentLevel().question) }}>
                            </div>
                        </div>

                        <form onSubmit={(e) => { playSound('click.mp3'); handleSubmit(e); }} className="answer-form">
                            <input
                                type="text"
                                value={answer}
                                onChange={(e) => setAnswer(e.target.value)}
                                placeholder="‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"
                                autoFocus
                                className="answer-input"
                            />
                            <div className="button-group">
                                <button type="submit" className="submit-button" onClick={() => playSound('click.mp3')}>‡∏ï‡∏≠‡∏ö</button>
                                <button type="button" className="hint-button" onClick={() => { playSound('button.mp3'); showHint(); }}>
                                    <span className="hint-icon">üí°</span> ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ
                                </button>
                            </div>
                        </form>
                    </>
                ) : (
                    <div className="game-over">
                        {gameCompleted ? (
                            <div className="completion-message">
                                <h2>üéä ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß üéä</h2>
                                <div className="final-score">
                                    <p>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: {score}</p>
                                    <div className="stars-container">
                                        <StarRating stars={stars} />
                                    </div>
                                    <div className="used-time-summary" style={{ marginTop: 16 }}>
                                        <h4>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡πà‡∏≤‡∏ô:</h4>
                                        <ul style={{ textAlign: 'left', display: 'inline-block' }}>
                                            {Object.entries(usedTimePerLevel).map(([level, time]) => (
                                                <li key={level}>‡∏î‡πà‡∏≤‡∏ô {level}: {time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</li>
                                            ))}
                                        </ul>
                                    </div>
                                </div>
                                <div className="game-over-buttons">
                                    <button 
                                        className="replay-button"
                                        onClick={() => {
                                            playSound('button.mp3');
                                            setCurrentLevel(1);
                                            setScore(0);
                                            setStars(0);
                                            setAnswer('');
                                            setIsPlaying(true);
                                            setGameCompleted(false);
                                            setElapsedTime(0);
                                        }}
                                    >
                                        ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
                                    </button>
                                    <button 
                                        className="home-button"
                                        onClick={() => {
                                            playSound('button.mp3');
                                            navigate('/student-dashboard');
                                        }}
                                    >
                                        ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                                    </button>
                                </div>
                            </div>
                        ) : elapsedTime === 0 ? (
                            <>
                                <h2>‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤!</h2>
                                <button 
                                    className="retry-button"
                                    onClick={() => {
                                        const currentLevelData = levels[currentLevel - 1];
                                        setElapsedTime(currentLevelData.timeLimit);
                                        setIsPlaying(true);
                                    }}
                                >
                                    ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                                </button>
                            </>
                        ) : (
                            <div className="loading">
                                <h2>‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...</h2>
                                <div className="loading-spinner"></div>
                            </div>
                        )}
                    </div>
                )}
            </div>

            {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏Å‡∏° */}
            <div className="game-controls">
                <button 
                    className="level-select-button"
                    onClick={() => {
                        playSound('button.mp3');
                        setShowLevelSelector(true);
                    }}
                >
                    <span className="level-icon">üéÆ</span> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô
                </button>
                
                <button 
                    className="reset-button"
                    onClick={() => {
                        playSound('button.mp3');
                        resetCurrentLevel();
                    }}
                >
                    <span className="reset-icon">üîÑ</span> ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏î‡πà‡∏≤‡∏ô
                </button>

                <button 
                    className="home-button"
                    onClick={() => {
                        playSound('button.mp3');
                        navigate('/student-dashboard');
                    }}
                >
                    <span className="home-icon">üè†</span> ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                </button>
            </div>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ */}
            {showHintPopup && (
                <HintPopup 
                    hint={levels[currentLevel - 1].hint} 
                    onClose={() => setShowHintPopup(false)}
                    levelNumber={currentLevel}
                />
            )}

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô */}
            {showLevelSelector && (
                <LevelSelector 
                    levels={levels}
                    currentLevel={currentLevel}
                    setCurrentLevel={setCurrentLevel}
                    completedLevels={completedLevels}
                    onClose={() => setShowLevelSelector(false)}
                />
            )}

            {isModalOpen && (
                <div className="modal">
                    <div className="modal-content">
                        <h2>{modalContent.title}</h2>
                        <p>{modalContent.message}</p>
                        {modalContent.title.includes('‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á') && (
                            <p style={{ fontWeight: 'bold', color: '#1976d2' }}>
                                ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {usedTimePerLevel[currentLevel] || 0} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                            </p>
                        )}
                        <button 
                            className="close-button"
                            onClick={() => setIsModalOpen(false)}
                        >
                            ‡∏õ‡∏¥‡∏î
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default MathPuzzle;