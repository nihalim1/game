import React, { useState, useEffect } from 'react';
import './MathPuzzle.css';
import { useNotification } from '../contexts/NotificationContext';
import { saveGameProgress, getGameProgress } from '../utils/gameProgress';
import { useNavigate } from 'react-router-dom';

// ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå HintPopup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÅ‡∏ö‡∏ö‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û
const HintPopup = ({ hint, onClose, levelNumber }) => {
    useEffect(() => {
        document.body.classList.add('popup-active');
        
        return () => {
            document.body.classList.remove('popup-active');
        };
    }, []);
    
    return (
        <div className="hint-popup">
            <div className="hint-popup-title">üîç ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà {levelNumber}</div>
            <div className="hint-popup-content">{hint}</div>
            <button className="hint-popup-close" onClick={onClose}>‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß</button>
        </div>
    );
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå LevelSelector ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô
const LevelSelector = ({ levels, currentLevel, setCurrentLevel, completedLevels, onClose }) => {
    useEffect(() => {
        document.body.classList.add('popup-active');
        
        return () => {
            document.body.classList.remove('popup-active');
        };
    }, []);
    
    return (
        <div className="level-selector-popup">
            <div className="level-selector-title">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô</div>
            <div className="level-selector-content">
                <div className="level-grid">
                    {levels.map((level, index) => (
                        <button
                            key={index}
                            className={`level-button ${index + 1 === currentLevel ? 'current' : ''} ${index + 1 <= completedLevels ? 'unlocked' : 'locked'}`}
                            onClick={() => {
                                if (index + 1 <= completedLevels + 1) {
                                    setCurrentLevel(index + 1);
                                    onClose();
                                }
                            }}
                            disabled={index + 1 > completedLevels + 1}
                        >
                            <span className="level-number">{index + 1}</span>
                            {index + 1 <= completedLevels && <span className="completed-indicator">‚úì</span>}
                        </button>
                    ))}
                </div>
            </div>
            <button className="level-selector-close" onClick={onClose}>‡∏õ‡∏¥‡∏î</button>
        </div>
    );
};

const MathPuzzle = () => {
    const navigate = useNavigate();
    const [currentLevel, setCurrentLevel] = useState(1);
    const [answer, setAnswer] = useState('');
    const [score, setScore] = useState(0);
    const [timeLeft, setTimeLeft] = useState(60);
    const [isPlaying, setIsPlaying] = useState(false);
    const [stars, setStars] = useState(0);
    const [gameCompleted, setGameCompleted] = useState(false);
    const { addNotification } = useNotification();
    const [showHintPopup, setShowHintPopup] = useState(false);
    const [showLevelSelector, setShowLevelSelector] = useState(false);
    const [completedLevels, setCompletedLevels] = useState(0);
    const [animating, setAnimating] = useState(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
    const [totalStars, setTotalStars] = useState(0); // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏≤‡∏ß‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const [highestScore, setHighestScore] = useState(0); // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏î‡πà‡∏≤‡∏ô
    const levels = [
        {
            title: "‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ö‡∏ß‡∏Å‡πÄ‡∏•‡∏Ç‡∏á‡πà‡∏≤‡∏¢‡πÜ",
            question: "‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡πâ‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏° 15 ‡∏ä‡∏¥‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å 10 ‡∏ä‡∏¥‡πâ‡∏ô ‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡πâ‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏µ‡πà‡∏ä‡∏¥‡πâ‡∏ô?",
            answer: "25",
            hint: "‡πÉ‡∏´‡πâ‡∏ö‡∏ß‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏ô‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏ô‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°",
            timeLimit: 30,
            points: 100
        },
        {
            title: "‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ",
            question: "‡∏à‡∏á‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö: 2, 4, 6, 8, ...",
            answer: "10",
            hint: "‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ 2",
            timeLimit: 30,
            points: 150
        },
        // ... ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πà‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏° ...
        {
            title: "‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 20: ‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢‡πÜ",
            question: "‡∏ñ‡πâ‡∏≤ x + 5 = 12 ‡πÅ‡∏•‡πâ‡∏ß x ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£?",
            answer: "7",
            hint: "‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ x ‡πÇ‡∏î‡∏¢‡∏•‡∏ö 5 ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏Å‡∏≤‡∏£",
            timeLimit: 150,
            points: 1000
        }
    ];

    // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°
    useEffect(() => {
        const progress = getGameProgress('mathPuzzle');
        if (progress.completedLevels > 0) {
            setCompletedLevels(progress.completedLevels);
            // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏î‡πà‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î + 1
            setCurrentLevel(Math.min(progress.completedLevels + 1, 20));
        }
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        if (progress.totalStars) setTotalStars(progress.totalStars);
        if (progress.highestScore) {
            setHighestScore(progress.highestScore);
            setScore(progress.highestScore);
        }

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const currentLevelData = levels[currentLevel - 1];
        setTimeLeft(currentLevelData.timeLimit);
        setIsPlaying(true);
    }, []);

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏î‡πà‡∏≤‡∏ô
    useEffect(() => {
        if (currentLevel > 0) {
            setAnimating(true);
            const currentLevelData = levels[currentLevel - 1];
            setTimeLeft(currentLevelData.timeLimit);
            setIsPlaying(true);
            setAnswer('');
            
            // ‡∏à‡∏ö‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 500ms
            setTimeout(() => {
                setAnimating(false);
            }, 500);
        }
    }, [currentLevel]);

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
    useEffect(() => {
        if (!isPlaying) return;

        const timer = setInterval(() => {
            setTimeLeft(prev => {
                if (prev <= 1) {
                    clearInterval(timer);
                    handleTimeout();
                    return 0;
                }
                return prev - 1;
            });
        }, 1000);

        return () => clearInterval(timer);
    }, [isPlaying]);

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    const handleTimeout = () => {
        setIsPlaying(false);
        
        addNotification({
            type: 'error',
            title: '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤!',
            message: '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
            duration: 3000
        });
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏£‡∏ì‡∏µ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
        const currentLevelData = levels[currentLevel - 1];
        saveGameHistory(currentLevelData, answer || "(‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö)", false, 0, 0, 0);
    };

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
    const calculateStars = (timeLeft, totalTime) => {
        const timePercentage = (timeLeft / totalTime) * 100;
        
        if (timePercentage >= 70) return 5; // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ 70% ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ = 5 ‡∏î‡∏≤‡∏ß
        if (timePercentage >= 50) return 4; // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ 50-69% = 4 ‡∏î‡∏≤‡∏ß
        if (timePercentage >= 30) return 3; // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ 30-49% = 3 ‡∏î‡∏≤‡∏ß
        if (timePercentage >= 10) return 2; // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ 10-29% = 2 ‡∏î‡∏≤‡∏ß
        return 1; // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 10% = 1 ‡∏î‡∏≤‡∏ß
    };

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ
    const showHint = () => {
        const currentLevelData = levels[currentLevel - 1];
        
        // ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ (‡∏ï‡∏±‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 10% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ô‡∏±‡πâ‡∏ô)
        const hintPenalty = Math.round(currentLevelData.points * 0.1);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÉ‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        const hintUsed = localStorage.getItem(`mathPuzzle_hint_level_${currentLevel}`);
        
        if (!hintUsed) {
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÅ‡∏•‡πâ‡∏ß
            localStorage.setItem(`mathPuzzle_hint_level_${currentLevel}`, 'true');
            
            // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
            addNotification({
                type: 'info',
                title: 'üîç ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà ' + currentLevel,
                message: `${currentLevelData.hint} (‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å ${hintPenalty} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)`,
                duration: 5000
            });
            
            // ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            setScore(prevScore => Math.max(0, prevScore - hintPenalty));
        } else {
            // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏Ñ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
            addNotification({
                type: 'info',
                title: 'üîç ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà ' + currentLevel,
                message: currentLevelData.hint,
                duration: 5000
            });
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ
        setShowHintPopup(true);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Å‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        const hintButton = document.querySelector('.hint-button');
        if (hintButton) {
            hintButton.classList.add('used');
            setTimeout(() => {
                hintButton.classList.remove('used');
            }, 1000);
        }
    };

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
    const handleSubmit = (e) => {
        e.preventDefault();
        const currentLevelData = levels[currentLevel - 1];
        const isCorrect = answer === currentLevelData.answer;
        
        if (isCorrect) {
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
            const earnedPoints = currentLevelData.points;
            const earnedStars = calculateStars(timeLeft, currentLevelData.timeLimit);
            
            const newScore = score + earnedPoints;
            setScore(newScore);
            setStars(earnedStars);
            setIsPlaying(false);
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡∏≤‡∏ß‡∏£‡∏ß‡∏°
            const newTotalStars = totalStars + earnedStars;
            setTotalStars(newTotalStars);
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            if (newScore > highestScore) {
                setHighestScore(newScore);
            }
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            addNotification({
                type: 'success',
                title: 'üéâ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!',
                message: `+${earnedPoints} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô, ${earnedStars} ‡∏î‡∏≤‡∏ß`,
                duration: 3000
            });
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
            const newCompletedLevel = Math.max(completedLevels, currentLevel);
            setCompletedLevels(newCompletedLevel);
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤
            saveGameProgress('mathPuzzle', {
                completedLevels: newCompletedLevel,
                totalStars: newTotalStars,
                highestScore: Math.max(highestScore, newScore)
            });
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
            saveGameHistory(currentLevelData, answer, true, timeLeft, earnedPoints, earnedStars);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (currentLevel < 20) {
                setTimeout(() => {
                    setCurrentLevel(prev => prev + 1);
                    setAnswer('');
                    setIsPlaying(true);
                }, 2000);
            } else {
                // ‡∏à‡∏ö‡πÄ‡∏Å‡∏°
                setGameCompleted(true);
                addNotification({
                    type: 'success',
                    title: 'üèÜ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!',
                    message: '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ' + newScore,
                    duration: 5000
                });
            } 
        } else {
            // ‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î
            addNotification({
                type: 'error',
                title: '‚ùå ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
                message: '‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                duration: 3000
            });
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô (‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î)
            saveGameHistory(currentLevelData, answer, false, timeLeft, 0, 0);
        }
    };

    // ‡πÅ‡∏™‡∏î‡∏á‡∏î‡∏≤‡∏ß
    const StarRating = ({ stars }) => {
        return (
            <div className="star-rating">
                {[1, 2, 3, 4, 5].map((index) => (
                    <span 
                        key={index} 
                        className={`star ${index <= stars ? 'filled' : 'empty'}`}
                    >
                        ‚òÖ
                    </span>
                ))}
            </div>
        );
    };

    // ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
    const formatTime = (seconds) => {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    };

    const getCurrentLevel = () => levels[currentLevel - 1];

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏î‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const resetCurrentLevel = () => {
        const currentLevelData = levels[currentLevel - 1];
        setTimeLeft(currentLevelData.timeLimit);
        setIsPlaying(true);
        setAnswer('');
        
        addNotification({
            type: 'info',
            title: 'üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏î‡πà‡∏≤‡∏ô',
            message: `‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà ${currentLevel} ‡πÉ‡∏´‡∏°‡πà`,
            duration: 3000
        });
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå
    const formatMathQuestion = (question) => {
        // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏î‡πâ‡∏ß‡∏¢ span ‡∏ó‡∏µ‡πà‡∏°‡∏µ class ‡∏û‡∏¥‡πÄ‡∏®‡∏©
        let formattedQuestion = question.replace(/(\d+(\.\d+)?)/g, '<span class="math-number">$1</span>');
        
        // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ span ‡∏ó‡∏µ‡πà‡∏°‡∏µ class ‡∏û‡∏¥‡πÄ‡∏®‡∏©
        const mathFormulas = [
            'sin', 'cos', 'tan', 'log', '\\+', '\\-', '\\*', '\\/', '\\^', '=', '\\(', '\\)',
            'œÄ', '‚àö', 'Œ£', 'a\\^2', 'x\\^2', '\\d+\\^\\d+', '\\w+\\^\\d+'
        ];
        
        const formulaPattern = new RegExp(`(${mathFormulas.join('|')})`, 'g');
        formattedQuestion = formattedQuestion.replace(formulaPattern, '<span class="math-formula">$1</span>');
        
        return formattedQuestion;
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
    const saveGameHistory = (levelData, userAnswer, isCorrect, usedTime, earnedPoints, earnedStars) => {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
        const historyEntry = {
            timestamp: new Date().toISOString(),
            level: currentLevel,
            levelTitle: levelData.title,
            question: levelData.question,
            userAnswer: userAnswer,
            correctAnswer: levelData.answer,
            isCorrect: isCorrect,
            timeLimit: levelData.timeLimit,
            timeUsed: levelData.timeLimit - usedTime,
            earnedPoints: isCorrect ? earnedPoints : 0,
            earnedStars: isCorrect ? earnedStars : 0,
            hints: localStorage.getItem(`mathPuzzle_hint_level_${currentLevel}`) === 'true'
        };

        // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏î‡∏¥‡∏°
        let gameHistory = JSON.parse(localStorage.getItem('mathPuzzle_history') || '[]');
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà
        gameHistory.push(historyEntry);
        
        // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        if (gameHistory.length > 100) {
            gameHistory = gameHistory.slice(-100);
        }
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
        localStorage.setItem('mathPuzzle_history', JSON.stringify(gameHistory));
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
        updateGameStats(isCorrect, earnedPoints, earnedStars);
    };

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
    const updateGameStats = (isCorrect, points, stars) => {
        // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏î‡∏¥‡∏°
        let stats = JSON.parse(localStorage.getItem('mathPuzzle_stats') || '{}');
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        stats.totalPlayed = (stats.totalPlayed || 0) + 1;
        stats.correctAnswers = (stats.correctAnswers || 0) + (isCorrect ? 1 : 0);
        stats.incorrectAnswers = (stats.incorrectAnswers || 0) + (isCorrect ? 0 : 1);
        stats.totalPoints = (stats.totalPoints || 0) + (isCorrect ? points : 0);
        stats.totalStars = (stats.totalStars || 0) + (isCorrect ? stars : 0);
        stats.lastPlayed = new Date().toISOString();
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
        localStorage.setItem('mathPuzzle_stats', JSON.stringify(stats));
    };

    return (
        <div className="math-puzzle">
            <div className={`game-header ${animating ? 'animate-fadein' : ''}`}>
                <h1>{getCurrentLevel().title}</h1>
                <div className="game-stats">
                    <div className="score-container">
                        <div className="score">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {score}</div>
                        <div className="total-stars">‡∏î‡∏≤‡∏ß‡∏™‡∏∞‡∏™‡∏°: {totalStars}</div>
                    </div>
                    <div className={`timer ${timeLeft <= 10 ? 'timer-warning' : ''}`}>
                        <span className="timer-icon">‚è±Ô∏è</span>
                        <span className="timer-text">{formatTime(timeLeft)}</span>
                    </div>
                    <StarRating stars={stars} />
                </div>
            </div>

            <div className={`puzzle-container ${animating ? 'animate-slidein' : ''}`}>
                {isPlaying ? (
                    <>
                        <div className="level-info">
                            <div className="question" 
                                 dangerouslySetInnerHTML={{ __html: formatMathQuestion(getCurrentLevel().question) }}>
                            </div>
                        </div>

                        <form onSubmit={handleSubmit} className="answer-form">
                            <input
                                type="text"
                                value={answer}
                                onChange={(e) => setAnswer(e.target.value)}
                                placeholder="‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"
                                autoFocus
                                className="answer-input"
                            />
                            <div className="button-group">
                                <button type="submit" className="submit-button">‡∏ï‡∏≠‡∏ö</button>
                                <button type="button" className="hint-button" onClick={showHint}>
                                    <span className="hint-icon">üí°</span> ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ
                                </button>
                            </div>
                        </form>
                    </>
                ) : (
                    <div className="game-over">
                        {gameCompleted ? (
                            <div className="completion-message">
                                <h2>üéä ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß üéä</h2>
                                <div className="final-score">
                                    <p>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: {score}</p>
                                    <div className="stars-container">
                                        <StarRating stars={stars} />
                                    </div>
                                </div>
                                <div className="game-over-buttons">
                                    <button 
                                        className="replay-button"
                                        onClick={() => {
                                            setCurrentLevel(1);
                                            setScore(0);
                                            setStars(0);
                                            setAnswer('');
                                            setIsPlaying(true);
                                            setGameCompleted(false);
                                            setTimeLeft(levels[0].timeLimit);
                                        }}
                                    >
                                        ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
                                    </button>
                                    <button 
                                        className="home-button"
                                        onClick={() => navigate('/student-dashboard')}
                                    >
                                        ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                                    </button>
                                </div>
                            </div>
                        ) : timeLeft === 0 ? (
                            <>
                                <h2>‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤!</h2>
                                <button 
                                    className="retry-button"
                                    onClick={() => {
                                        const currentLevelData = levels[currentLevel - 1];
                                        setTimeLeft(currentLevelData.timeLimit);
                                        setIsPlaying(true);
                                    }}
                                >
                                    ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                                </button>
                            </>
                        ) : (
                            <div className="loading">
                                <h2>‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...</h2>
                                <div className="loading-spinner"></div>
                            </div>
                        )}
                    </div>
                )}
            </div>

            {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏Å‡∏° */}
            <div className="game-controls">
                <button 
                    className="level-select-button"
                    onClick={() => setShowLevelSelector(true)}
                >
                    <span className="level-icon">üéÆ</span> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô
                </button>
                
                <button 
                    className="reset-button"
                    onClick={resetCurrentLevel}
                >
                    <span className="reset-icon">üîÑ</span> ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏î‡πà‡∏≤‡∏ô
                </button>

                <button 
                    className="home-button"
                    onClick={() => navigate('/student-dashboard')}
                >
                    <span className="home-icon">üè†</span> ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                </button>
            </div>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ */}
            {showHintPopup && (
                <HintPopup 
                    hint={levels[currentLevel - 1].hint} 
                    onClose={() => setShowHintPopup(false)}
                    levelNumber={currentLevel}
                />
            )}

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô */}
            {showLevelSelector && (
                <LevelSelector 
                    levels={levels}
                    currentLevel={currentLevel}
                    setCurrentLevel={setCurrentLevel}
                    completedLevels={completedLevels}
                    onClose={() => setShowLevelSelector(false)}
                />
            )}
        </div>
    );
};

export default MathPuzzle;