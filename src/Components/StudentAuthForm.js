import React, { useState, useCallback, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './StudentAuthForm.css';
import { useNotification } from '../contexts/NotificationContext';
import { AuthContext } from '../contexts/AuthContext';

const StudentAuthForm = () => {
    const navigate = useNavigate();
    const { addNotification } = useNotification();
    const { customLogin } = useContext(AuthContext);
    const [isLogin, setIsLogin] = useState(true);
    const [formData, setFormData] = useState({
        student_id: '',
        first_name: '',
        last_name: '',
        email: '',
        password: '',
        confirmPassword: '',
        classroom: '',
        age: ''
    });
    const [message, setMessage] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [hasShownSuccess, setHasShownSuccess] = useState(false);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const validateForm = useCallback(() => {
        if (!formData.email || !formData.password) {
            setMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô');
            return false;
        }

        if (!isLogin) {
            if (!formData.student_id || !formData.first_name || !formData.last_name || 
                !formData.classroom || !formData.age) {
                setMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
                return false;
            }

            if (formData.password !== formData.confirmPassword) {
                setMessage('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
                return false;
            }

            if (formData.password.length < 6) {
                setMessage('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
                return false;
            }
        }

        return true;
    }, [formData, isLogin]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£ submit form
    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!validateForm()) return;

        setIsLoading(true);
        setMessage('');

        try {
            const endpoint = `${isLogin ? 'student_login.php' : 'student_signup.php'}`;
            
            // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ API
            const payload = isLogin ? {
                email: formData.email,
                password: formData.password
            } : {
                student_id: formData.student_id,
                first_name: formData.first_name,
                last_name: formData.last_name,
                email: formData.email,
                password: formData.password,
                classroom: formData.classroom,
                age: parseInt(formData.age)
            };

            const response = await axios.post(endpoint, payload, {
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                timeout: 10000, // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                baseURL: 'http://mgt2.pnu.ac.th/kong/app-game/'
            });

            if (response.data.success) {
                if (isLogin) {
                    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô localStorage
                    localStorage.setItem('student', JSON.stringify(response.data.data));
                    customLogin(response.data.data);
                    setMessage('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...');
                    
                    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ dashboard
                    setTimeout(() => {
                        navigate('/student-dashboard');
                    }, 1500);

                    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    if (!hasShownSuccess) {
                        addNotification({
                            type: 'success',
                            title: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                            message: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤!'
                        });
                        setHasShownSuccess(true);

                        // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                        setTimeout(() => {
                            setHasShownSuccess(false);
                        }, 3000);
                    }
                } else {
                    // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí login ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                    // ‡∏™‡πà‡∏á request login ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                    try {
                        const loginResponse = await axios.post('student_login.php', {
                            email: formData.email,
                            password: formData.password
                        }, {
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            },
                            baseURL: 'http://mgt2.pnu.ac.th/kong/app-game/'
                        });

                        if (loginResponse.data.success) {
                            localStorage.setItem('student', JSON.stringify(loginResponse.data.data));
                            customLogin(loginResponse.data.data);
                            setMessage('‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ...');
                            setTimeout(() => {
                                navigate('/student-dashboard');
                            }, 1500);
                        } else {
                            setMessage('‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
                            setTimeout(() => {
                                setIsLogin(true);
                                setFormData({
                                    student_id: '',
                                    first_name: '',
                                    last_name: '',
                                    email: '',
                                    password: '',
                                    confirmPassword: '',
                                    classroom: '',
                                    age: ''
                                });
                            }, 1500);
                        }
                    } catch (e) {
                        setMessage('‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
                        setTimeout(() => {
                            setIsLogin(true);
                            setFormData({
                                student_id: '',
                                first_name: '',
                                last_name: '',
                                email: '',
                                password: '',
                                confirmPassword: '',
                                classroom: '',
                                age: ''
                            });
                        }, 1500);
                    }
                }
            } else {
                setMessage(response.data.message);
            }
        } catch (error) {
            addNotification({
                type: 'error',
                title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
                message: error.response?.data?.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ'
            });
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="student-auth-container">
            <div className="home-bg-shapes">
                <div className="shape shape-1"></div>
                <div className="shape shape-2"></div>
                <div className="shape shape-3"></div>
                <div className="shape shape-4"></div>
            </div>
            
            <div className="student-auth-content">
                <div className="logo-container">
                    <div className="logo-icon">
                        <span>{isLogin ? 'üîë' : 'üìù'}</span>
                    </div>
                    <h1>EdTech<span>Connect</span></h1>
                </div>
                
                <div className="student-auth-box">
                    <h2>{isLogin ? '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' : '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'}</h2>
                    
                    <div className="welcome-text">
                        <p>{isLogin 
                            ? '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' 
                            : '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ'
                        }</p>
                    </div>
                    
                    {message && (
                        <div className={`message-box ${message.includes('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à') ? 'success' : 'error'}`}>
                            {message}
                        </div>
                    )}
                    
                    <form onSubmit={handleSubmit} className="student-form">
                        {!isLogin && (
                            <div className="form-row">
                                <div className="student-form-group">
                                    <label>‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</label>
                                    <div className="input-with-icon">
                                        <span className="input-icon">üÜî</span>
                                        <input
                                            type="text"
                                            value={formData.student_id}
                                            onChange={(e) => setFormData({...formData, student_id: e.target.value})}
                                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
                                            required
                                        />
                                    </div>
                                </div>
                            </div>
                        )}
                        
                        {!isLogin && (
                            <div className="form-row two-columns">
                                <div className="student-form-group">
                                    <label>‡∏ä‡∏∑‡πà‡∏≠</label>
                                    <div className="input-with-icon">
                                        <span className="input-icon">üë§</span>
                                        <input
                                            type="text"
                                            value={formData.first_name}
                                            onChange={(e) => setFormData({...formData, first_name: e.target.value})}
                                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠"
                                            required
                                        />
                                    </div>
                                </div>
                                
                                <div className="student-form-group">
                                    <label>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
                                    <input
                                        type="text"
                                        value={formData.last_name}
                                        onChange={(e) => setFormData({...formData, last_name: e.target.value})}
                                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                                        required
                                    />
                                </div>
                            </div>
                        )}
                        
                        {!isLogin && (
                            <div className="form-row two-columns">
                                <div className="student-form-group">
                                    <label>‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</label>
                                    <div className="input-with-icon">
                                        <span className="input-icon">üè´</span>
                                        <input
                                            type="text"
                                            value={formData.classroom}
                                            onChange={(e) => setFormData({...formData, classroom: e.target.value})}
                                            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏õ.6/1"
                                            required
                                        />
                                    </div>
                                </div>
                                
                                <div className="student-form-group">
                                    <label>‡∏≠‡∏≤‡∏¢‡∏∏</label>
                                    <div className="input-with-icon">
                                        <span className="input-icon">üéÇ</span>
                                        <input
                                            type="number"
                                            value={formData.age}
                                            onChange={(e) => setFormData({...formData, age: e.target.value})}
                                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏"
                                            required
                                            min="7"
                                            max="15"
                                        />
                                    </div>
                                </div>
                            </div>
                        )}
                        
                        <div className="student-form-group">
                            <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
                            <div className="input-with-icon">
                                <span className="input-icon">üìß</span>
                                <input
                                    type="email"
                                    value={formData.email}
                                    onChange={(e) => setFormData({...formData, email: e.target.value})}
                                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                                    required
                                />
                            </div>
                        </div>
                        
                        <div className="student-form-group">
                            <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
                            <div className="input-with-icon">
                                <span className="input-icon">üîí</span>
                                <input
                                    type="password"
                                    value={formData.password}
                                    onChange={(e) => setFormData({...formData, password: e.target.value})}
                                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                                    required
                                />
                            </div>
                        </div>

                        {!isLogin && (
                            <div className="student-form-group">
                                <label>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
                                <div className="input-with-icon">
                                    <span className="input-icon">üîê</span>
                                    <input
                                        type="password"
                                        value={formData.confirmPassword}
                                        onChange={(e) => setFormData({...formData, confirmPassword: e.target.value})}
                                        placeholder="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                                        required
                                    />
                                </div>
                            </div>
                        )}

                        <button 
                            type="submit" 
                            className="student-submit-btn" 
                            disabled={isLoading}
                        >
                            {isLoading ? (
                                <span className="loading-spinner"></span>
                            ) : (
                                <>
                                {isLogin ? 'üöÄ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' : '‚ú® ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô'}
                                </>
                            )}
                        </button>
                    </form>

                    <div className="auth-actions">
                        <button 
                            className="student-switch-mode"
                            onClick={() => {
                                setIsLogin(!isLogin);
                                setMessage('');
                                setFormData({
                                    student_id: '',
                                    first_name: '',
                                    last_name: '',
                                    email: '',
                                    password: '',
                                    confirmPassword: '',
                                    classroom: '',
                                    age: ''
                                });
                            }}
                            disabled={isLoading}
                        >
                            {isLogin ? 'üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà' : '‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'}
                        </button>
                        
                        <button 
                            className="go-back-btn"
                            onClick={() => navigate('/')}
                        >
                            üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                        </button>
                    </div>
                </div>
                
                <div className="footer">
                    <p>¬© 2023 EdTech Connect | ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞</p>
                </div>
            </div>
        </div>
    );
};

export default StudentAuthForm;